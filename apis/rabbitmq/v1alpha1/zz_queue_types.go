/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueueInitParameters struct {

	// The settings of the queue. The structure is
	// described below.
	Settings []QueueSettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type QueueObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The name of the queue.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The settings of the queue. The structure is
	// described below.
	Settings []QueueSettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type QueueParameters struct {

	// The name of the queue.
	// +crossplane:generate:reference:type=Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a Name to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a Name to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`

	// The settings of the queue. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Settings []QueueSettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=VHost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type QueueSettingsInitParameters struct {

	// Additional key/value settings for the queue.
	// All values will be sent to RabbitMQ as a string. If you require non-string
	// values, use arguments_json.
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// A nested JSON string which contains additional
	// settings for the queue. This is useful for when the arguments contain
	// non-string values.
	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`

	// Whether the queue will self-delete when all
	// consumers have unsubscribed.
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the queue survives server restarts.
	// Defaults to false.
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`
}

type QueueSettingsObservation struct {

	// Additional key/value settings for the queue.
	// All values will be sent to RabbitMQ as a string. If you require non-string
	// values, use arguments_json.
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// A nested JSON string which contains additional
	// settings for the queue. This is useful for when the arguments contain
	// non-string values.
	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`

	// Whether the queue will self-delete when all
	// consumers have unsubscribed.
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the queue survives server restarts.
	// Defaults to false.
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`
}

type QueueSettingsParameters struct {

	// Additional key/value settings for the queue.
	// All values will be sent to RabbitMQ as a string. If you require non-string
	// values, use arguments_json.
	// +kubebuilder:validation:Optional
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// A nested JSON string which contains additional
	// settings for the queue. This is useful for when the arguments contain
	// non-string values.
	// +kubebuilder:validation:Optional
	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`

	// Whether the queue will self-delete when all
	// consumers have unsubscribed.
	// +kubebuilder:validation:Optional
	AutoDelete *bool `json:"autoDelete,omitempty" tf:"auto_delete,omitempty"`

	// Whether the queue survives server restarts.
	// Defaults to false.
	// +kubebuilder:validation:Optional
	Durable *bool `json:"durable,omitempty" tf:"durable,omitempty"`
}

// QueueSpec defines the desired state of Queue
type QueueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     QueueParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider QueueInitParameters `json:"initProvider,omitempty"`
}

// QueueStatus defines the observed state of Queue.
type QueueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        QueueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Queue is the Schema for the Queues API. Creates and manages a queue on a RabbitMQ server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Queue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.settings) || has(self.initProvider.settings)",message="settings is a required parameter"
	Spec   QueueSpec   `json:"spec"`
	Status QueueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// QueueList contains a list of Queues
type QueueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Queue `json:"items"`
}

// Repository type metadata.
var (
	Queue_Kind             = "Queue"
	Queue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Queue_Kind}.String()
	Queue_KindAPIVersion   = Queue_Kind + "." + CRDGroupVersion.String()
	Queue_GroupVersionKind = CRDGroupVersion.WithKind(Queue_Kind)
)

func init() {
	SchemeBuilder.Register(&Queue{}, &QueueList{})
}
