/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InfoInitParameters struct {

	// Determines how the shovel should acknowledge messages. Possible values are: on-confirm, on-publish and no-ack.
	// Defaults to on-confirm.
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	AddForwardHeaders *bool `json:"addForwardHeaders,omitempty" tf:"add_forward_headers,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	DeleteAfter *string `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	DestinationAddForwardHeaders *bool `json:"destinationAddForwardHeaders,omitempty" tf:"destination_add_forward_headers,omitempty"`

	DestinationAddTimestampHeader *bool `json:"destinationAddTimestampHeader,omitempty" tf:"destination_add_timestamp_header,omitempty"`

	// The AMQP 1.0 destination link address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// Application properties to set when shovelling messages.
	DestinationApplicationProperties *string `json:"destinationApplicationProperties,omitempty" tf:"destination_application_properties,omitempty"`

	// The exchange to which messages should be published.
	// Either this or destination_queue must be specified but not both.
	DestinationExchange *string `json:"destinationExchange,omitempty" tf:"destination_exchange,omitempty"`

	// The routing key when using destination_exchange.
	DestinationExchangeKey *string `json:"destinationExchangeKey,omitempty" tf:"destination_exchange_key,omitempty"`

	// Properties to overwrite when shovelling messages.
	DestinationProperties *string `json:"destinationProperties,omitempty" tf:"destination_properties,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the destination.
	// Defaults to amqp091.
	DestinationProtocol *string `json:"destinationProtocol,omitempty" tf:"destination_protocol,omitempty"`

	// A map of properties to overwrite when shovelling messages.
	DestinationPublishProperties *string `json:"destinationPublishProperties,omitempty" tf:"destination_publish_properties,omitempty"`

	// The queue to which messages should be published.
	// Either this or destination_exchange must be specified but not both.
	DestinationQueue *string `json:"destinationQueue,omitempty" tf:"destination_queue,omitempty"`

	// The amqp uri for the destination .
	DestinationURI *string `json:"destinationUri,omitempty" tf:"destination_uri,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The duration in seconds to reconnect to a broker after disconnected.
	// Defaults to 1.
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// The AMQP 1.0 source link address.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	SourceDeleteAfter *string `json:"sourceDeleteAfter,omitempty" tf:"source_delete_after,omitempty"`

	// The exchange from which to consume.
	// Either this or source_queue must be specified but not both.
	SourceExchange *string `json:"sourceExchange,omitempty" tf:"source_exchange,omitempty"`

	// The routing key when using source_exchange.
	SourceExchangeKey *string `json:"sourceExchangeKey,omitempty" tf:"source_exchange_key,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	SourcePrefetchCount *float64 `json:"sourcePrefetchCount,omitempty" tf:"source_prefetch_count,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the source.
	// Defaults to amqp091.
	SourceProtocol *string `json:"sourceProtocol,omitempty" tf:"source_protocol,omitempty"`

	// The queue from which to consume.
	// Either this or source_exchange must be specified but not both.
	SourceQueue *string `json:"sourceQueue,omitempty" tf:"source_queue,omitempty"`

	// The amqp uri for the source.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`
}

type InfoObservation struct {

	// Determines how the shovel should acknowledge messages. Possible values are: on-confirm, on-publish and no-ack.
	// Defaults to on-confirm.
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	AddForwardHeaders *bool `json:"addForwardHeaders,omitempty" tf:"add_forward_headers,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	DeleteAfter *string `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	DestinationAddForwardHeaders *bool `json:"destinationAddForwardHeaders,omitempty" tf:"destination_add_forward_headers,omitempty"`

	DestinationAddTimestampHeader *bool `json:"destinationAddTimestampHeader,omitempty" tf:"destination_add_timestamp_header,omitempty"`

	// The AMQP 1.0 destination link address.
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// Application properties to set when shovelling messages.
	DestinationApplicationProperties *string `json:"destinationApplicationProperties,omitempty" tf:"destination_application_properties,omitempty"`

	// The exchange to which messages should be published.
	// Either this or destination_queue must be specified but not both.
	DestinationExchange *string `json:"destinationExchange,omitempty" tf:"destination_exchange,omitempty"`

	// The routing key when using destination_exchange.
	DestinationExchangeKey *string `json:"destinationExchangeKey,omitempty" tf:"destination_exchange_key,omitempty"`

	// Properties to overwrite when shovelling messages.
	DestinationProperties *string `json:"destinationProperties,omitempty" tf:"destination_properties,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the destination.
	// Defaults to amqp091.
	DestinationProtocol *string `json:"destinationProtocol,omitempty" tf:"destination_protocol,omitempty"`

	// A map of properties to overwrite when shovelling messages.
	DestinationPublishProperties *string `json:"destinationPublishProperties,omitempty" tf:"destination_publish_properties,omitempty"`

	// The queue to which messages should be published.
	// Either this or destination_exchange must be specified but not both.
	DestinationQueue *string `json:"destinationQueue,omitempty" tf:"destination_queue,omitempty"`

	// The amqp uri for the destination .
	DestinationURI *string `json:"destinationUri,omitempty" tf:"destination_uri,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The duration in seconds to reconnect to a broker after disconnected.
	// Defaults to 1.
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// The AMQP 1.0 source link address.
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	SourceDeleteAfter *string `json:"sourceDeleteAfter,omitempty" tf:"source_delete_after,omitempty"`

	// The exchange from which to consume.
	// Either this or source_queue must be specified but not both.
	SourceExchange *string `json:"sourceExchange,omitempty" tf:"source_exchange,omitempty"`

	// The routing key when using source_exchange.
	SourceExchangeKey *string `json:"sourceExchangeKey,omitempty" tf:"source_exchange_key,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	SourcePrefetchCount *float64 `json:"sourcePrefetchCount,omitempty" tf:"source_prefetch_count,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the source.
	// Defaults to amqp091.
	SourceProtocol *string `json:"sourceProtocol,omitempty" tf:"source_protocol,omitempty"`

	// The queue from which to consume.
	// Either this or source_exchange must be specified but not both.
	SourceQueue *string `json:"sourceQueue,omitempty" tf:"source_queue,omitempty"`

	// The amqp uri for the source.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`
}

type InfoParameters struct {

	// Determines how the shovel should acknowledge messages. Possible values are: on-confirm, on-publish and no-ack.
	// Defaults to on-confirm.
	// +kubebuilder:validation:Optional
	AckMode *string `json:"ackMode,omitempty" tf:"ack_mode,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	// +kubebuilder:validation:Optional
	AddForwardHeaders *bool `json:"addForwardHeaders,omitempty" tf:"add_forward_headers,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	// +kubebuilder:validation:Optional
	DeleteAfter *string `json:"deleteAfter,omitempty" tf:"delete_after,omitempty"`

	// Whether to add x-shovelled headers to shovelled messages.
	// +kubebuilder:validation:Optional
	DestinationAddForwardHeaders *bool `json:"destinationAddForwardHeaders,omitempty" tf:"destination_add_forward_headers,omitempty"`

	// +kubebuilder:validation:Optional
	DestinationAddTimestampHeader *bool `json:"destinationAddTimestampHeader,omitempty" tf:"destination_add_timestamp_header,omitempty"`

	// The AMQP 1.0 destination link address.
	// +kubebuilder:validation:Optional
	DestinationAddress *string `json:"destinationAddress,omitempty" tf:"destination_address,omitempty"`

	// Application properties to set when shovelling messages.
	// +kubebuilder:validation:Optional
	DestinationApplicationProperties *string `json:"destinationApplicationProperties,omitempty" tf:"destination_application_properties,omitempty"`

	// The exchange to which messages should be published.
	// Either this or destination_queue must be specified but not both.
	// +kubebuilder:validation:Optional
	DestinationExchange *string `json:"destinationExchange,omitempty" tf:"destination_exchange,omitempty"`

	// The routing key when using destination_exchange.
	// +kubebuilder:validation:Optional
	DestinationExchangeKey *string `json:"destinationExchangeKey,omitempty" tf:"destination_exchange_key,omitempty"`

	// Properties to overwrite when shovelling messages.
	// +kubebuilder:validation:Optional
	DestinationProperties *string `json:"destinationProperties,omitempty" tf:"destination_properties,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the destination.
	// Defaults to amqp091.
	// +kubebuilder:validation:Optional
	DestinationProtocol *string `json:"destinationProtocol,omitempty" tf:"destination_protocol,omitempty"`

	// A map of properties to overwrite when shovelling messages.
	// +kubebuilder:validation:Optional
	DestinationPublishProperties *string `json:"destinationPublishProperties,omitempty" tf:"destination_publish_properties,omitempty"`

	// The queue to which messages should be published.
	// Either this or destination_exchange must be specified but not both.
	// +kubebuilder:validation:Optional
	DestinationQueue *string `json:"destinationQueue,omitempty" tf:"destination_queue,omitempty"`

	// The amqp uri for the destination .
	// +kubebuilder:validation:Optional
	DestinationURI *string `json:"destinationUri" tf:"destination_uri,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	// +kubebuilder:validation:Optional
	PrefetchCount *float64 `json:"prefetchCount,omitempty" tf:"prefetch_count,omitempty"`

	// The duration in seconds to reconnect to a broker after disconnected.
	// Defaults to 1.
	// +kubebuilder:validation:Optional
	ReconnectDelay *float64 `json:"reconnectDelay,omitempty" tf:"reconnect_delay,omitempty"`

	// The AMQP 1.0 source link address.
	// +kubebuilder:validation:Optional
	SourceAddress *string `json:"sourceAddress,omitempty" tf:"source_address,omitempty"`

	// Determines when (if ever) the shovel should delete itself. Possible values are: never, queue-length or an integer.
	// +kubebuilder:validation:Optional
	SourceDeleteAfter *string `json:"sourceDeleteAfter,omitempty" tf:"source_delete_after,omitempty"`

	// The exchange from which to consume.
	// Either this or source_queue must be specified but not both.
	// +kubebuilder:validation:Optional
	SourceExchange *string `json:"sourceExchange,omitempty" tf:"source_exchange,omitempty"`

	// The routing key when using source_exchange.
	// +kubebuilder:validation:Optional
	SourceExchangeKey *string `json:"sourceExchangeKey,omitempty" tf:"source_exchange_key,omitempty"`

	// The maximum number of unacknowledged messages copied over a shovel at any one time.
	// +kubebuilder:validation:Optional
	SourcePrefetchCount *float64 `json:"sourcePrefetchCount,omitempty" tf:"source_prefetch_count,omitempty"`

	// The protocol (amqp091 or amqp10) to use when connecting to the source.
	// Defaults to amqp091.
	// +kubebuilder:validation:Optional
	SourceProtocol *string `json:"sourceProtocol,omitempty" tf:"source_protocol,omitempty"`

	// The queue from which to consume.
	// Either this or source_exchange must be specified but not both.
	// +kubebuilder:validation:Optional
	SourceQueue *string `json:"sourceQueue,omitempty" tf:"source_queue,omitempty"`

	// The amqp uri for the source.
	// +kubebuilder:validation:Optional
	SourceURI *string `json:"sourceUri" tf:"source_uri,omitempty"`
}

type ShovelInitParameters struct {

	// The settings of the dynamic shovel. The structure is
	// described below.
	Info []InfoInitParameters `json:"info,omitempty" tf:"info,omitempty"`
}

type ShovelObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The settings of the dynamic shovel. The structure is
	// described below.
	Info []InfoObservation `json:"info,omitempty" tf:"info,omitempty"`

	// The shovel name.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type ShovelParameters struct {

	// The settings of the dynamic shovel. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Info []InfoParameters `json:"info,omitempty" tf:"info,omitempty"`

	// The shovel name.
	// +crossplane:generate:reference:type=Name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Reference to a Name to populate name.
	// +kubebuilder:validation:Optional
	NameRef *v1.Reference `json:"nameRef,omitempty" tf:"-"`

	// Selector for a Name to populate name.
	// +kubebuilder:validation:Optional
	NameSelector *v1.Selector `json:"nameSelector,omitempty" tf:"-"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=VHost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

// ShovelSpec defines the desired state of Shovel
type ShovelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShovelParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ShovelInitParameters `json:"initProvider,omitempty"`
}

// ShovelStatus defines the observed state of Shovel.
type ShovelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShovelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Shovel is the Schema for the Shovels API. Creates and manages a shovel on a RabbitMQ server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Shovel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.info) || has(self.initProvider.info)",message="info is a required parameter"
	Spec   ShovelSpec   `json:"spec"`
	Status ShovelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShovelList contains a list of Shovels
type ShovelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Shovel `json:"items"`
}

// Repository type metadata.
var (
	Shovel_Kind             = "Shovel"
	Shovel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Shovel_Kind}.String()
	Shovel_KindAPIVersion   = Shovel_Kind + "." + CRDGroupVersion.String()
	Shovel_GroupVersionKind = CRDGroupVersion.WithKind(Shovel_Kind)
)

func init() {
	SchemeBuilder.Register(&Shovel{}, &ShovelList{})
}
