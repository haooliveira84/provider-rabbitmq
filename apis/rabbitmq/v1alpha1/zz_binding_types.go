/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BindingInitParameters struct {

	// Additional key/value arguments for the binding.
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`
}

type BindingObservation struct {

	// Additional key/value arguments for the binding.
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`

	// The destination queue or exchange.
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// The type of destination (queue or exchange).
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A unique key to refer to the binding.
	PropertiesKey *string `json:"propertiesKey,omitempty" tf:"properties_key,omitempty"`

	// A routing key for the binding.
	RoutingKey *string `json:"routingKey,omitempty" tf:"routing_key,omitempty"`

	// The source exchange.
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type BindingParameters struct {

	// Additional key/value arguments for the binding.
	// +kubebuilder:validation:Optional
	Arguments map[string]*string `json:"arguments,omitempty" tf:"arguments,omitempty"`

	// +kubebuilder:validation:Optional
	ArgumentsJSON *string `json:"argumentsJson,omitempty" tf:"arguments_json,omitempty"`

	// The destination queue or exchange.
	// +crossplane:generate:reference:type=Exchange
	// +kubebuilder:validation:Optional
	Destination *string `json:"destination,omitempty" tf:"destination,omitempty"`

	// Reference to a Exchange to populate destination.
	// +kubebuilder:validation:Optional
	DestinationRef *v1.Reference `json:"destinationRef,omitempty" tf:"-"`

	// Selector for a Exchange to populate destination.
	// +kubebuilder:validation:Optional
	DestinationSelector *v1.Selector `json:"destinationSelector,omitempty" tf:"-"`

	// The type of destination (queue or exchange).
	// +crossplane:generate:reference:type=DestinationType
	// +kubebuilder:validation:Optional
	DestinationType *string `json:"destinationType,omitempty" tf:"destination_type,omitempty"`

	// Reference to a DestinationType to populate destinationType.
	// +kubebuilder:validation:Optional
	DestinationTypeRef *v1.Reference `json:"destinationTypeRef,omitempty" tf:"-"`

	// Selector for a DestinationType to populate destinationType.
	// +kubebuilder:validation:Optional
	DestinationTypeSelector *v1.Selector `json:"destinationTypeSelector,omitempty" tf:"-"`

	// A routing key for the binding.
	// +crossplane:generate:reference:type=RoutingKey
	// +kubebuilder:validation:Optional
	RoutingKey *string `json:"routingKey,omitempty" tf:"routing_key,omitempty"`

	// Reference to a RoutingKey to populate routingKey.
	// +kubebuilder:validation:Optional
	RoutingKeyRef *v1.Reference `json:"routingKeyRef,omitempty" tf:"-"`

	// Selector for a RoutingKey to populate routingKey.
	// +kubebuilder:validation:Optional
	RoutingKeySelector *v1.Selector `json:"routingKeySelector,omitempty" tf:"-"`

	// The source exchange.
	// +crossplane:generate:reference:type=Exchange
	// +kubebuilder:validation:Optional
	Source *string `json:"source,omitempty" tf:"source,omitempty"`

	// Reference to a Exchange to populate source.
	// +kubebuilder:validation:Optional
	SourceRef *v1.Reference `json:"sourceRef,omitempty" tf:"-"`

	// Selector for a Exchange to populate source.
	// +kubebuilder:validation:Optional
	SourceSelector *v1.Selector `json:"sourceSelector,omitempty" tf:"-"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=Vhost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a Vhost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a Vhost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

// BindingSpec defines the desired state of Binding
type BindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BindingParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BindingInitParameters `json:"initProvider,omitempty"`
}

// BindingStatus defines the observed state of Binding.
type BindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Binding is the Schema for the Bindings API. Creates and manages a binding on a RabbitMQ server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Binding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BindingSpec   `json:"spec"`
	Status            BindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BindingList contains a list of Bindings
type BindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Binding `json:"items"`
}

// Repository type metadata.
var (
	Binding_Kind             = "Binding"
	Binding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Binding_Kind}.String()
	Binding_KindAPIVersion   = Binding_Kind + "." + CRDGroupVersion.String()
	Binding_GroupVersionKind = CRDGroupVersion.WithKind(Binding_Kind)
)

func init() {
	SchemeBuilder.Register(&Binding{}, &BindingList{})
}
