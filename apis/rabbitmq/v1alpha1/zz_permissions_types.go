/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PermissionsInitParameters struct {

	// The settings of the permissions. The structure is
	// described below.
	Permissions []PermissionsPermissionsInitParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`
}

type PermissionsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The settings of the permissions. The structure is
	// described below.
	Permissions []PermissionsPermissionsObservation `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The user to apply the permissions to.
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// The vhost to create the resource in.
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`
}

type PermissionsParameters struct {

	// The settings of the permissions. The structure is
	// described below.
	// +kubebuilder:validation:Optional
	Permissions []PermissionsPermissionsParameters `json:"permissions,omitempty" tf:"permissions,omitempty"`

	// The user to apply the permissions to.
	// +crossplane:generate:reference:type=User
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a User to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a User to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`

	// The vhost to create the resource in.
	// +crossplane:generate:reference:type=VHost
	// +kubebuilder:validation:Optional
	Vhost *string `json:"vhost,omitempty" tf:"vhost,omitempty"`

	// Reference to a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostRef *v1.Reference `json:"vhostRef,omitempty" tf:"-"`

	// Selector for a VHost to populate vhost.
	// +kubebuilder:validation:Optional
	VhostSelector *v1.Selector `json:"vhostSelector,omitempty" tf:"-"`
}

type PermissionsPermissionsInitParameters struct {
}

type PermissionsPermissionsObservation struct {

	// The "configure" ACL.
	Configure *string `json:"configure,omitempty" tf:"configure,omitempty"`

	// The "read" ACL.
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// The "write" ACL.
	Write *string `json:"write,omitempty" tf:"write,omitempty"`
}

type PermissionsPermissionsParameters struct {

	// The "configure" ACL.
	// +crossplane:generate:reference:type=PermissionsConfigure
	// +kubebuilder:validation:Optional
	Configure *string `json:"configure,omitempty" tf:"configure,omitempty"`

	// Reference to a PermissionsConfigure to populate configure.
	// +kubebuilder:validation:Optional
	ConfigureRef *v1.Reference `json:"configureRef,omitempty" tf:"-"`

	// Selector for a PermissionsConfigure to populate configure.
	// +kubebuilder:validation:Optional
	ConfigureSelector *v1.Selector `json:"configureSelector,omitempty" tf:"-"`

	// The "read" ACL.
	// +crossplane:generate:reference:type=PermissionsRead
	// +kubebuilder:validation:Optional
	Read *string `json:"read,omitempty" tf:"read,omitempty"`

	// Reference to a PermissionsRead to populate read.
	// +kubebuilder:validation:Optional
	ReadRef *v1.Reference `json:"readRef,omitempty" tf:"-"`

	// Selector for a PermissionsRead to populate read.
	// +kubebuilder:validation:Optional
	ReadSelector *v1.Selector `json:"readSelector,omitempty" tf:"-"`

	// The "write" ACL.
	// +crossplane:generate:reference:type=PermissionsWrite
	// +kubebuilder:validation:Optional
	Write *string `json:"write,omitempty" tf:"write,omitempty"`

	// Reference to a PermissionsWrite to populate write.
	// +kubebuilder:validation:Optional
	WriteRef *v1.Reference `json:"writeRef,omitempty" tf:"-"`

	// Selector for a PermissionsWrite to populate write.
	// +kubebuilder:validation:Optional
	WriteSelector *v1.Selector `json:"writeSelector,omitempty" tf:"-"`
}

// PermissionsSpec defines the desired state of Permissions
type PermissionsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PermissionsParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PermissionsInitParameters `json:"initProvider,omitempty"`
}

// PermissionsStatus defines the observed state of Permissions.
type PermissionsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PermissionsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Permissions is the Schema for the Permissionss API. Creates and manages a user's permissions on a RabbitMQ server.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,rabbitmq}
type Permissions struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissions) || has(self.initProvider.permissions)",message="permissions is a required parameter"
	Spec   PermissionsSpec   `json:"spec"`
	Status PermissionsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PermissionsList contains a list of Permissionss
type PermissionsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Permissions `json:"items"`
}

// Repository type metadata.
var (
	Permissions_Kind             = "Permissions"
	Permissions_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Permissions_Kind}.String()
	Permissions_KindAPIVersion   = Permissions_Kind + "." + CRDGroupVersion.String()
	Permissions_GroupVersionKind = CRDGroupVersion.WithKind(Permissions_Kind)
)

func init() {
	SchemeBuilder.Register(&Permissions{}, &PermissionsList{})
}
